/**
 * @file config.h.in
 * @author JiahuiWang
 * @brief configuation file of tinycoro
 * @version 1.1
 * @date 2025-03-23
 *
 * @copyright Copyright (c) 2025
 *
 * @warning you should modify config.h.in instead of config.h,
 * any change of config.h is useless.
 */

#ifndef CONFIG_H
#define CONFIG_H

#define VERSION_MAJOR "@PROJECT_VERSION_MAJOR@"
#define VERSION_MINOR "@PROJECT_VERSION_MINOR@"
// #define INSTALL_PREFIX "@CMAKE_INSTALL_PREFIX@"

#include "stddef.h"
#include "stdint.h"
#include "time.h"
#include <limits>

#include "coro/detail/types.hpp"

#define SOURCE_DIR "@PROJECT_SOURCE_DIR@"

namespace coro::config
{

// ========================== log configuration =============================
// don't uncomment below, these tell you the different log level
// #define TRACE 0
// #define DEBUG 1
// #define INFO 2
// #define WARN 3
// #define ERR 4
// #define CRITICAL 5
// #define OFF 6

// when LOGTOFILE is defined, the log will also be printed to logfile
// #define LOGTOFILE
#define LOG_LEVEL info
#define USEMUTEX

// the log file stograge path, complete path is ${tinycoro_path}/kLogFileName
constexpr const char* kLogFileName = "/temp/logs/coro.log";

// the log flush interval
constexpr int64_t kFlushDura = 3; // seconds

// =========================== cpu configuration ============================
// use alignas(config::kCacheLineSize) to reduce cache invalidation
constexpr size_t kCacheLineSize = 64;

// ====================== memory allocator configuration ====================
// only ENABLE_MEMORY_ALLOC is defined, the memory allocator strategy will be enabled
#define ENABLE_MEMORY_ALLOC

// memory allocator is used to allocate memory for coroutine
constexpr coro::detail::memory_allocator kMemoryAllocator = coro::detail::memory_allocator::std_allocator;

// ========================== uring configuration ===========================
// io_uring queue length
constexpr unsigned int kEntryLength = 10240;

// set kEnableFixfd = true can make io_uring optimized by IOSQE_FIXED_FILE
constexpr bool kEnableFixfd = false;

// Fixed fd buffer length registerd to io_uring,
// if your application use one fd to launch lots of IO, just increase this para
constexpr unsigned int kFixFdArraySize = 8;

// WARN: These two modes cannot be enabled simultaneously
// uncomment below to open uring sqpool mode
// #define ENABLE_SQPOOL

// uncomment below to open uring iopoll mode,
// iopoll mode need hardware support and only support fd with O_DIRECT
// #define ENABLE_IOPOLL

constexpr unsigned int kSqthreadIdle = 2000; // millseconds

// ===================== execute engine configuration =======================
using ctx_id = uint32_t;

// engine task queue length, at least >= 4096,
// if submit task to a full task queue:
//    case in working thread: exec task directly
//    case not in working thread: report error and ignore this task
constexpr size_t kQueCap = 16384;

// scheduler dispacher strategy
constexpr coro::detail::dispatch_strategy kDispatchStrategy = coro::detail::dispatch_strategy::round_robin;

// If one thread submit task to another thread or itself which owns a full task queue,
// the submit func will be blocked, so execuate this task directly instead of submitting task,
// but this will cause recursive call, so use this parameter to constrain the recursive depth
constexpr size_t kMaxRecursiveDepth = 4096;

/**
 * @warning kLongRunMode is deprecated
 *
 * @brief there are two modes: long run mode and short run mode,
 * set kLongRunMode true to open long run mode.
 *
 * @note long run mode: context will never stop, this applies to tasks
 * that require tinycoro to run for a long time, such as a web server
 *
 * @note short run mode: all tasks must be submitted to context before context run,
 * if context start and no tasks in its queue, it will stop immediately
 *
 * @note submit_to_scheduler() is affected by this parameter, if current mode
 * is long run mode. submit_to_scheduler() will use dispatcher to submit task,
 * otherwise use local_context to submit task
 */
inline bool kLongRunMode = true;

// =========================== tcp configuration ============================
constexpr int kDefaultPort = 8000;
constexpr int kBacklog     = 5;

// ========================== http configuration ============================

// server config
// constexpr size_t kHttpRedirectMaxCount          = 20;
// constexpr size_t kHttpKeepAliveMaxCount         = 100;
// constexpr time_t kHttpKeepAliveTimeoutSecond    = 5;
// constexpr time_t kHttpServerReadTimeoutSecond   = 5;
// constexpr time_t kHttpServerReadTimeoutUSecond  = 0;
// constexpr time_t kHttpServerWriteTimeoutSecond  = 5;
// constexpr time_t kHttpServerWriteTimeoutUSecond = 0;
// constexpr time_t kHttpIdleIntervalSecond        = 0;
// constexpr time_t kHttpIdleIntervalUSecond       = 0;
// constexpr time_t kHttpPayloadMaxLength          = ((std::numeric_limits<size_t>::max)());

// // client config
// constexpr time_t kHttpConnectionTimeoutSecond   = 300;
// constexpr time_t kHttpConnectionTimeoutUSecond  = 0;
// constexpr time_t kHttpClientReadTimeoutSecond   = 300;
// constexpr time_t kHttpClientReadTimeoutUSecond  = 0;
// constexpr time_t kHttpClientWriteTimeoutSecond  = 5;
// constexpr time_t kHttpClientWriteTimeoutUSecond = 0;
// constexpr time_t kHttpClientMaxTimeoutMSecond   = 0;

// constexpr size_t kHttpHeaderMaxLength     = 8192;
// constexpr size_t kHttpRequestUriMaxLength = 8192;
// constexpr bool   kHttpTcpNodeLay          = false;
// constexpr bool   kHttpIpv6Only            = false;
// constexpr size_t kHttpRangeMaxCount       = 1024;
// constexpr int    kHttpListenBacklog       = 5;

// ========================== test configuration ============================
/**
 * @brief kMaxTestTaskNum represents the maximum value in the test case
 *
 * @warning kMaxTestTaskNum < (core-number * kQueCap), if your environment
 * don't follow this rule, decrease this number, otherwise test will block
 */
constexpr int kMaxTestTaskNum = 100000;
};     // namespace coro::config
#endif // CONFIG_H
